15 Mar, 2106hrs
===============

Roles:
	1) 	added roles mapping

Indications:
	1) 	patient indications stored currently as an array of integers,
		integers point to position in Indicators enum for specific indications.
	2)	unable to store array of arrays for Indications[] indication => uint[] patientIDs,
		will assume to loop through from start till end during request-processing.
		this can facilitate FIFO algorithm for patients, but incur more gas for loops.

18 Mar, 1712hrs
===============

Tests:
	-	Create Patient
	- 	Unregister patient
	- 	Allocate patient
	- 	Check allocation

Functions:
	1)	createPatient
		Figured that we shouldn't lump create + list together.
		Hence, power users need to create patients first.
	2)	unlistPatient
	3)	allocatePatient
		No way to override, hence system and power users share permission.
		System will approve all power users to allocate patients via ERC721 during deployment.
		Once allocated, either via system or power user, students are the only ones empowered to
		transfer their patients to other students (due to nature of ERC721).
		
		
20 Mar, 0025hrs
===============

Tests:
	-	Get contract owner
	- 	Check student transfer event
	- 	Check patient's dentist updated after student transfer
	- 	Get total number of patients (*)
	-	/*Get indications of all patients*/ (**)

Functions:
	-	Organized by cateogries & alphabetically
	1)	getOwner
	2)	studentTransfer
	3)	getTotalPatients
	4)	/*getIndications*/ (**)
	
Concerns:
	(*)		Should this include historical patients? If yes, we will need to determine when
			will the patient's status be resolved. E.g. after allocation? or student process 
			patient, then click 'resolve' somewhere?
	(**)	This requires to be done on client side and not in the contract. 
			Firstly, Solidity doesn't support the returning of 2D arrays.
			Secondly, the current implementation that I commented out is:
			-	Contract stores a dynamically sized array 'ret'
			-	Loop through all patients
			-	Check if they are unresolved
			-	Check whether patient is listed (not incorporated because I realized this 
				shouldn't be done in contract)
			-	Push patient ID into 'ret'
			-	Loop through patient's indication and push indication into 'ret'
			-	Push extremely large number into 'ret' to denote separator
			This solves the problem in the best way pertaining to Solidity's shortcomings.
			However, it involves x10000000000000 write operations which is costly af.
			Imagine having to clear out the 'ret' array to cater to a new getIndications call?