15 Mar, 2106hrs
===============

Roles:
	1) 	added roles mapping

Indications:
	1) 	patient indications stored currently as an array of integers,
		integers point to position in Indicators enum for specific indications.
	2)	unable to store array of arrays for Indications[] indication => uint[] patientIDs,
		will assume to loop through from start till end during request-processing.
		this can facilitate FIFO algorithm for patients, but incur more gas for loops.

18 Mar, 1712hrs
===============

Tests:
	-	Create Patient
	- 	Unregister patient
	- 	Allocate patient
	- 	Check allocation

Functions:
	1)	createPatient
		Figured that we shouldn't lump create + list together.
		Hence, power users need to create patients first.
	2)	unlistPatient
	3)	allocatePatient
		No way to override, hence system and power users share permission.
		System will approve all power users to allocate patients via ERC721 during deployment.
		Once allocated, either via system or power user, students are the only ones empowered to
		transfer their patients to other students (due to nature of ERC721).
		
		
20 Mar, 0025hrs
===============

Tests:
	-	Get contract owner
	- 	Check student transfer event
	- 	Check patient's dentist updated after student transfer
	- 	Get total number of patients (*)
	-	/*Get indications of all patients*/ (**)

Functions:
	-	Organized by cateogries & alphabetically
	1)	getOwner
	2)	studentTransfer
	3)	getTotalPatients
	4)	/*getIndications*/ (**)
	
Concerns:
	(*)		Should this include historical patients? If yes, we will need to determine when
			will the patient's status be resolved. E.g. after allocation? or student process 
			patient, then click 'resolve' somewhere?
	(**)	This requires to be done on client side and not in the contract. 
			Firstly, Solidity doesn't support the returning of 2D arrays.
			Secondly, the current implementation that I commented out is:
			-	Contract stores a dynamically sized array 'ret'
			-	Loop through all patients
			-	Check if they are unresolved
			-	Check whether patient is listed (not incorporated because I realized this 
				shouldn't be done in contract)
			-	Push patient ID into 'ret'
			-	Loop through patient's indication and push indication into 'ret'
			-	Push extremely large number into 'ret' to denote separator
			This solves the problem in the best way pertaining to Solidity's shortcomings.
			However, it involves x10000000000000 write operations which is costly af.
			Imagine having to clear out the 'ret' array to cater to a new getIndications call?
			
5 Apr, ????hrs
===============
Contract Deployment:
	-	Deploy Request contract, parse Patient address in
	-	Retrieve Request address once deployed
	-	Call setRequestAddress in Patient for patient allocation by Request Contract
	
Tests:
	> Split into double sections for both contracts
	-	Patient
	1)	Resolving patients by students
	2)	Patient is successfully resolved
	
	-	Request
	1)	Contract deployment
	2)	Contract owner
	3)	Create request 1
	4)	Check request 1
	5)	Update request 1
	6)	Check updated request
	7)	Create patient 2
	8)	Check patient 2 records
	9)	List patient 2
	10)	Process request 1
	11)	Check post-request-processing patient's dentist
	12)	Check request is resolved
	13)	Get total requests

Functions:
	-	Patient.sol
	>	Added unresolved requirements
	1)	resolvePatient
	2)	getIndications
		Only returns a set of indications for a particular patient.
		To facilitate request-processing.
	
	-	Request.sol
	>	Setters
	1)	createRequest
	2)	processRequest
		Will allocate patient to student and resolve the request upon processing.
		Assumes client will facilitate FCFS and matching of request and patient.
		**NOTE: Indications must match.
	3)	updateRequest
		Assumes client side will differentiate between staff and student.
		Student can only update indications, score recalculated and provided by client.
		Client will pass (0 [default allocated patient ID], 
						  new score, new indications, 
						  false [default resolution]) for students.
		Staff can update all 4 fields. 
	
	>	Getters
	1)	getOwner
	2)	getRequest
	3)	getTotalRequests
	
10 Apr, 1707hrs
===============
Contract Deployment:
	
Tests:
	-	Patient
	1)	Update patient 1 inforation
	2)	Check patient 1 updated information
	3)	Create Power User 3
	4)	Check Power User 3 registration
	5)	Create Admin User 3
	6)	Check Admin User 3 registration
	
	-	Request
	1)	Create request 2
	2)	Withdraw request 2
	3)	Check request 2 withdrawal (resolved) status
	4)	Create Power User 3
	5)	Check Power User 3 registration
	6)	Create Admin User 3
	7)	Check Admin User 3 registration

Functions:
	-	Patient.sol
	1)	updatePatient
	2)	createPowerUser
	3)	createAdminUser
	4)	getPowerUser
	5)	getAdminUser
	
	-	Request.sol
	1)	withdrawRequest
	2)	createPowerUser
	3)	createAdminUser
	4)	getPowerUser
	5)	getAdminUser